@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
        @*ApplicationUser user = await UserManager.GetUserAsync(User);*@

        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index"  title="Manage"> @*UserManager.GetUserAsync(User)?.Name!*@ @*User.Identity?.Name!*@
                
                @*if(User.Identity.IsAuthenticated)
                {
                    var user = await UserManager.GetUserAsync(User);
                    if (user != null)
                    {
                        <span><i class="bi bi-person-circle">&nbsp;&nbsp; @User.Identity.Name</i></span>
                    }
                }*@
            </a>
    </li>
    <li class="nav-item">
        <form  class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button  type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
}
@*else
{
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}*@
</ul>
